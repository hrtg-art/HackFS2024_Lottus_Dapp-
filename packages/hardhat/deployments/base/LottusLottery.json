{
  "address": "0x2ADC1EF82E8CEcd481CDEC3B0b6FD9F8B6Cf1090",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "badge",
          "type": "string"
        }
      ],
      "name": "BadgeAwarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBannerCID",
          "type": "string"
        }
      ],
      "name": "BannerCIDUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "LotteryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "participants",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bannerCID",
          "type": "string"
        }
      ],
      "name": "LotteryEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrizePoolDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "TicketPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prizeAmount",
          "type": "uint256"
        }
      ],
      "name": "WinnerSelected",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "charityRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bannerCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "winnerNFTCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "participantNFTCID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bannerCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "winnerNFTCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "participantNFTCID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositPrizePool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endLotteryEarly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBannerCID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCharity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCharityRecords",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "charity",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct LottusLottery.CharityRecord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastPrizeDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipantNFTCID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBadges",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerNFTCID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerRecords",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct LottusLottery.WinnerRecord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "badge",
          "type": "string"
        }
      ],
      "name": "hasBadge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLotteryActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCharityAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPrizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "participants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "participantsMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBannerCID",
          "type": "string"
        }
      ],
      "name": "updateBannerCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participationCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDonations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSpent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winnerRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fa8b250f2beab1976319c5cee68fcbb0bf96d5a60d59d1c829b4ad213d5d922",
  "receipt": {
    "to": null,
    "from": "0x616e4e08feB22819eB608c5aC3e6203A85Ce7e82",
    "contractAddress": "0x2ADC1EF82E8CEcd481CDEC3B0b6FD9F8B6Cf1090",
    "transactionIndex": 34,
    "gasUsed": "2355999",
    "logsBloom": "0x
    "blockHash": "0xb4c853e3aa28a5a1fbbdd7008656eead007dd7c9fdaa6518b3d3e80f94a04360",
    "transactionHash": "0x5fa8b250f2beab1976319c5cee68fcbb0bf96d5a60d59d1c829b4ad213d5d922",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 15231440,
        "transactionHash": "0x5fa8b250f2beab1976319c5cee68fcbb0bf96d5a60d59d1c829b4ad213d5d922",
        "address": "0x2ADC1EF82E8CEcd481CDEC3B0b6FD9F8B6Cf1090",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000616e4e08feb22819eb608c5ac3e6203a85ce7e82"
        ],
        "data": "0x",
        "logIndex": 183,
        "blockHash": "0xb4c853e3aa28a5a1fbbdd7008656eead007dd7c9fdaa6518b3d3e80f94a04360"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 15231440,
        "transactionHash": "0x5fa8b250f2beab1976319c5cee68fcbb0bf96d5a60d59d1c829b4ad213d5d922",
        "address": "0x2ADC1EF82E8CEcd481CDEC3B0b6FD9F8B6Cf1090",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000616e4e08feb22819eb608c5ac3e6203a85ce7e82",
          "0x000000000000000000000000bbe43612b9b577d5d9cb786324880c01d5792ebc"
        ],
        "data": "0x",
        "logIndex": 184,
        "blockHash": "0xb4c853e3aa28a5a1fbbdd7008656eead007dd7c9fdaa6518b3d3e80f94a04360"
      }
    ],
    "blockNumber": 15231440,
    "cumulativeGasUsed": "8250293",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbbe43612b9B577d5d9cB786324880c01d5792Ebc"
  ],
  "numDeployments": 1,
  "solcInputHash": "fe14c05a479edb2315d1de2c5c783509",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"badge\",\"type\":\"string\"}],\"name\":\"BadgeAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBannerCID\",\"type\":\"string\"}],\"name\":\"BannerCIDUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"LotteryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bannerCID\",\"type\":\"string\"}],\"name\":\"LotteryEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizePoolDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charityRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bannerCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"winnerNFTCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"participantNFTCID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bannerCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"winnerNFTCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"participantNFTCID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPrizePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endLotteryEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBannerCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharityRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct LottusLottery.CharityRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastPrizeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipantNFTCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBadges\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerNFTCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct LottusLottery.WinnerRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"badge\",\"type\":\"string\"}],\"name\":\"hasBadge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLotteryActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCharityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantsMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBannerCID\",\"type\":\"string\"}],\"name\":\"updateBannerCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"LottusLottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LottusNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\ninterface ILottusLottery {\\r\\n    function getParticipants() external view returns (address[] memory);\\r\\n    function getWinner() external view returns (address);\\r\\n    function isLotteryActive() external view returns (bool);\\r\\n    function currentLotteryId() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract LottusNFT is Ownable, ERC721URIStorage {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n    ILottusLottery public lotteryContract;\\r\\n    mapping(address => mapping(uint256 => bool)) public hasClaimedNFT;\\r\\n    bool public winnerNFTMinted;\\r\\n\\r\\n    string public winnerMetadataCID;\\r\\n    string public participantMetadataCID;\\r\\n\\r\\n    constructor(\\r\\n        string memory name, \\r\\n        string memory symbol, \\r\\n        address lotteryContractAddress, \\r\\n        string memory initialWinnerCID, \\r\\n        string memory initialParticipantCID\\r\\n    ) ERC721(name, symbol) {\\r\\n        lotteryContract = ILottusLottery(lotteryContractAddress);\\r\\n        winnerMetadataCID = initialWinnerCID;\\r\\n        participantMetadataCID = initialParticipantCID;\\r\\n    }\\r\\n\\r\\n    function updateWinnerMetadataCID(string memory newCID) external onlyOwner {\\r\\n        winnerMetadataCID = newCID;\\r\\n    }\\r\\n\\r\\n    function updateParticipantMetadataCID(string memory newCID) external onlyOwner {\\r\\n        participantMetadataCID = newCID;\\r\\n    }\\r\\n\\r\\n    function mintWinnerNFT() external onlyOwner {\\r\\n        require(!lotteryContract.isLotteryActive(), \\\"Lottery still active\\\");\\r\\n        address winner = lotteryContract.getWinner();\\r\\n        require(winner != address(0), \\\"No winner selected\\\");\\r\\n        require(!winnerNFTMinted, \\\"Winner NFT already minted\\\");\\r\\n\\r\\n        _tokenIds.increment();\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        _safeMint(winner, newItemId);\\r\\n        _setTokenURI(newItemId, string(abi.encodePacked(\\\"ipfs://\\\", winnerMetadataCID)));\\r\\n        winnerNFTMinted = true;\\r\\n    }\\r\\n\\r\\n    function claimParticipantNFT() external {\\r\\n        require(!lotteryContract.isLotteryActive(), \\\"Lottery still active\\\");\\r\\n        uint256 lotteryId = lotteryContract.currentLotteryId();\\r\\n        require(!hasClaimedNFT[msg.sender][lotteryId], \\\"NFT already claimed for this lottery\\\");\\r\\n\\r\\n        address[] memory participants = lotteryContract.getParticipants();\\r\\n        bool isParticipant = false;\\r\\n\\r\\n        for (uint256 i = 0; i < participants.length; i++) {\\r\\n            if (participants[i] == msg.sender) {\\r\\n                isParticipant = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(isParticipant, \\\"You did not participate in this lottery\\\");\\r\\n\\r\\n        _tokenIds.increment();\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        _safeMint(msg.sender, newItemId);\\r\\n        _setTokenURI(newItemId, string(abi.encodePacked(\\\"ipfs://\\\", participantMetadataCID)));\\r\\n\\r\\n        hasClaimedNFT[msg.sender][lotteryId] = true;\\r\\n    }\\r\\n\\r\\n    function getClaimedParticipants(uint256 lotteryId) external view returns (address[] memory) {\\r\\n        address[] memory participants = lotteryContract.getParticipants();\\r\\n        uint256 count = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < participants.length; i++) {\\r\\n            if (hasClaimedNFT[participants[i]][lotteryId]) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        address[] memory claimedParticipants = new address[](count);\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < participants.length; i++) {\\r\\n            if (hasClaimedNFT[participants[i]][lotteryId]) {\\r\\n                claimedParticipants[index] = participants[i];\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return claimedParticipants;\\r\\n    }\\r\\n\\r\\n    function resetClaimedParticipants(uint256 lotteryId) external onlyOwner {\\r\\n        require(winnerNFTMinted, \\\"Winner NFT not minted yet\\\");\\r\\n\\r\\n        address[] memory participants = lotteryContract.getParticipants();\\r\\n\\r\\n        for (uint256 i = 0; i < participants.length; i++) {\\r\\n            hasClaimedNFT[participants[i]][lotteryId] = false;\\r\\n        }\\r\\n\\r\\n        winnerNFTMinted = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x998125de9d0586d0d94b6a601e0e4c42a9d5ccc93e3ab48a1b099d56859a207b\",\"license\":\"MIT\"},\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./LottusNFT.sol\\\";\\r\\n\\r\\ncontract LottusLottery is Ownable {\\r\\n    struct Lottery {\\r\\n        uint256 id;\\r\\n        string name;\\r\\n        string description;\\r\\n        string bannerCID;\\r\\n        string winnerNFTCID;\\r\\n        string participantNFTCID;\\r\\n        uint256 ticketPrice;\\r\\n        address charity;\\r\\n        address[] participants;\\r\\n        address winner;\\r\\n        bool isActive;\\r\\n        uint256 endTime;\\r\\n    }\\r\\n\\r\\n    struct WinnerRecord {\\r\\n        address winner;\\r\\n        uint256 amount;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    struct CharityRecord {\\r\\n        address charity;\\r\\n        uint256 amount;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 level;\\r\\n        uint256 participationCount;\\r\\n        uint256 totalDonations;\\r\\n        uint256 totalSpent;\\r\\n        mapping(string => bool) badges;\\r\\n        string[] badgeList;\\r\\n    }\\r\\n\\r\\n    Lottery public currentLottery;\\r\\n    uint256 public currentLotteryId;\\r\\n    address[] public participants;\\r\\n\\r\\n    WinnerRecord[] public winnerRecords;\\r\\n    CharityRecord[] public charityRecords;\\r\\n\\r\\n    uint256 public lastPrizeAmount;\\r\\n    uint256 public lastCharityAmount;\\r\\n\\r\\n    mapping(address => User) public users;\\r\\n    mapping(address => bool) public participantsMap;\\r\\n\\r\\n    event LotteryCreated(uint256 indexed lotteryId, string name, address charity, uint256 endTime);\\r\\n    event TicketPurchased(uint256 indexed lotteryId, address indexed participant, uint256 quantity);\\r\\n    event WinnerSelected(uint256 indexed lotteryId, address indexed winner, uint256 prizeAmount);\\r\\n    event PrizePoolDeposited(uint256 amount);\\r\\n    event BannerCIDUpdated(uint256 indexed lotteryId, string newBannerCID);\\r\\n    event BadgeAwarded(address indexed user, string badge);\\r\\n    event LotteryEnded(uint256 indexed lotteryId, string name, string description, uint256 ticketPrice, address charity, address[] participants, address winner, bytes32 txId, string bannerCID);\\r\\n\\r\\n    constructor(address ownerAddress) {\\r\\n        transferOwnership(ownerAddress);\\r\\n        currentLotteryId = 0;\\r\\n    }\\r\\n\\r\\n    function createLottery(\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory bannerCID,\\r\\n        string memory winnerNFTCID,\\r\\n        string memory participantNFTCID,\\r\\n        uint256 ticketPrice,\\r\\n        address charity,\\r\\n        uint256 duration // nuevo par\\u00e1metro de duraci\\u00f3n en segundos\\r\\n    ) external onlyOwner {\\r\\n        require(!currentLottery.isActive, \\\"Previous lottery still active\\\");\\r\\n        require(ticketPrice > 0, \\\"Ticket price must be greater than 0\\\");\\r\\n        require(charity != address(0), \\\"Charity address cannot be zero address\\\");\\r\\n\\r\\n        currentLotteryId++;\\r\\n        uint256 endTime = block.timestamp + duration;\\r\\n        delete participants; // Clear participants array for the new lottery\\r\\n        currentLottery = Lottery({\\r\\n            id: currentLotteryId,\\r\\n            name: name,\\r\\n            description: description,\\r\\n            bannerCID: bannerCID,\\r\\n            winnerNFTCID: winnerNFTCID,\\r\\n            participantNFTCID: participantNFTCID,\\r\\n            ticketPrice: ticketPrice,\\r\\n            charity: charity,\\r\\n            endTime: endTime,\\r\\n            participants: participants,\\r\\n            winner: address(0),\\r\\n            isActive: true\\r\\n        });\\r\\n\\r\\n        emit LotteryCreated(currentLotteryId, name, charity, endTime);\\r\\n    }\\r\\n\\r\\n    function updateBannerCID(string memory newBannerCID) external onlyOwner {\\r\\n        require(currentLottery.isActive, \\\"No active lottery\\\");\\r\\n        currentLottery.bannerCID = newBannerCID;\\r\\n        emit BannerCIDUpdated(currentLottery.id, newBannerCID);\\r\\n    }\\r\\n\\r\\n    function depositPrizePool() external payable onlyOwner {\\r\\n        require(msg.value > 0, \\\"Must send ETH to deposit prize pool\\\");\\r\\n        emit PrizePoolDeposited(msg.value);\\r\\n    }\\r\\n\\r\\n    function buyTicket(uint256 quantity) external payable {\\r\\n        require(currentLottery.isActive, \\\"No active lottery\\\");\\r\\n        require(quantity > 0, \\\"Quantity must be greater than 0\\\");\\r\\n        require(msg.value == currentLottery.ticketPrice * quantity, \\\"Incorrect total ticket price\\\");\\r\\n\\r\\n        if (!participantsMap[msg.sender]) {\\r\\n            participantsMap[msg.sender] = true;\\r\\n            users[msg.sender].participationCount++;\\r\\n            users[msg.sender].level = users[msg.sender].participationCount / 1; // Increment level for every 5 participations\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < quantity; i++) {\\r\\n            participants.push(msg.sender);\\r\\n        }\\r\\n\\r\\n        users[msg.sender].totalSpent += msg.value;\\r\\n\\r\\n        emit TicketPurchased(currentLottery.id, msg.sender, quantity);\\r\\n\\r\\n        // Award badges based on participation count\\r\\n        if (users[msg.sender].participationCount == 1) {\\r\\n            awardBadge(msg.sender, \\\"Newcomer\\\");\\r\\n        }\\r\\n        if (users[msg.sender].participationCount == 5) {\\r\\n            awardBadge(msg.sender, \\\"Regular Participant\\\");\\r\\n        }\\r\\n        if (users[msg.sender].participationCount == 10) {\\r\\n            awardBadge(msg.sender, \\\"Frequent Player\\\");\\r\\n        }\\r\\n        if (users[msg.sender].participationCount == 20) {\\r\\n            awardBadge(msg.sender, \\\"Seasoned Player\\\");\\r\\n        }\\r\\n        if (users[msg.sender].participationCount == 50) {\\r\\n            awardBadge(msg.sender, \\\"Veteran Player\\\");\\r\\n        }\\r\\n        if (users[msg.sender].participationCount == 100) {\\r\\n            awardBadge(msg.sender, \\\"Centurion\\\");\\r\\n        }\\r\\n        if (users[msg.sender].participationCount == 200) {\\r\\n            awardBadge(msg.sender, \\\"Double Centurion\\\");\\r\\n        }\\r\\n        if (users[msg.sender].participationCount == 500) {\\r\\n            awardBadge(msg.sender, \\\"Half Millennia Master\\\");\\r\\n        }\\r\\n\\r\\n        // Award badges based on total spent\\r\\n        if (users[msg.sender].totalSpent >= 0.1 ether) {\\r\\n            awardBadge(msg.sender, \\\"Bronze Donor\\\");\\r\\n        }\\r\\n        if (users[msg.sender].totalSpent >= 0.5 ether) {\\r\\n            awardBadge(msg.sender, \\\"Silver Donor\\\");\\r\\n        }\\r\\n        if (users[msg.sender].totalSpent >= 1 ether) {\\r\\n            awardBadge(msg.sender, \\\"Gold Donor\\\");\\r\\n        }\\r\\n        if (users[msg.sender].totalSpent >= 2 ether) {\\r\\n            awardBadge(msg.sender, \\\"Platinum Donor\\\");\\r\\n        }\\r\\n        if (users[msg.sender].totalSpent >= 5 ether) {\\r\\n            awardBadge(msg.sender, \\\"Diamond Donor\\\");\\r\\n        }\\r\\n        if (users[msg.sender].totalSpent >= 10 ether) {\\r\\n            awardBadge(msg.sender, \\\"Master Philanthropist\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function endLotteryEarly() external onlyOwner {\\r\\n        require(currentLottery.isActive, \\\"No active lottery\\\");\\r\\n        require(participants.length > 0, \\\"No participants\\\");\\r\\n\\r\\n        currentLottery.isActive = false;\\r\\n        uint256 randomNumber = random();\\r\\n        selectWinner(randomNumber);\\r\\n\\r\\n        emit LotteryEnded(\\r\\n            currentLottery.id,\\r\\n            currentLottery.name,\\r\\n            currentLottery.description,\\r\\n            currentLottery.ticketPrice,\\r\\n            currentLottery.charity,\\r\\n            participants,\\r\\n            currentLottery.winner,\\r\\n            keccak256(abi.encodePacked(blockhash(block.number), msg.sender)),\\r\\n            currentLottery.bannerCID\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function selectWinner(uint256 randomNumber) internal {\\r\\n        address winner = participants[randomNumber % participants.length];\\r\\n        uint256 balance = address(this).balance;\\r\\n        uint256 prizeAmount = balance * 40 / 100;\\r\\n        uint256 charityAmount = balance * 40 / 100;\\r\\n        uint256 ownerAmount = balance * 10 / 100;\\r\\n        uint256 carryOverAmount = balance * 10 / 100;\\r\\n\\r\\n        payable(winner).transfer(prizeAmount);\\r\\n        payable(currentLottery.charity).transfer(charityAmount);\\r\\n        payable(owner()).transfer(ownerAmount);\\r\\n        // El 10% restante permanece en el contrato\\r\\n\\r\\n        currentLottery.winner = winner;\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        winnerRecords.push(WinnerRecord({winner: winner, amount: prizeAmount, timestamp: timestamp}));\\r\\n        charityRecords.push(CharityRecord({charity: currentLottery.charity, amount: charityAmount, timestamp: timestamp}));\\r\\n\\r\\n        lastPrizeAmount = prizeAmount;\\r\\n        lastCharityAmount = charityAmount;\\r\\n\\r\\n        emit WinnerSelected(currentLottery.id, winner, prizeAmount);\\r\\n\\r\\n        // Award badge for winning\\r\\n        awardBadge(winner, \\\"LuckyWinner\\\");\\r\\n    }\\r\\n\\r\\n    function awardBadge(address user, string memory badge) internal {\\r\\n        if (!users[user].badges[badge]) {\\r\\n            users[user].badges[badge] = true;\\r\\n            users[user].badgeList.push(badge);\\r\\n            emit BadgeAwarded(user, badge);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getParticipants() external view returns (address[] memory) {\\r\\n        return participants;\\r\\n    }\\r\\n\\r\\n    function getWinner() external view returns (address) {\\r\\n        return currentLottery.winner;\\r\\n    }\\r\\n\\r\\n    function getCharity() external view returns (address) {\\r\\n        return currentLottery.charity;\\r\\n    }\\r\\n\\r\\n    function getDescription() external view returns (string memory) {\\r\\n        return currentLottery.description;\\r\\n    }\\r\\n\\r\\n    function getBannerCID() external view returns (string memory) {\\r\\n        return currentLottery.bannerCID;\\r\\n    }\\r\\n\\r\\n    function getPrizePool() external view returns (uint256) {\\r\\n        return address(this).balance * 40 / 100;\\r\\n    }\\r\\n\\r\\n    function getWinnerRecords() external view returns (WinnerRecord[] memory) {\\r\\n        return winnerRecords;\\r\\n    }\\r\\n\\r\\n    function getCharityRecords() external view returns (CharityRecord[] memory) {\\r\\n        return charityRecords;\\r\\n    }\\r\\n\\r\\n    function getLastPrizeDetails() external view returns (uint256, uint256) {\\r\\n        return (lastPrizeAmount, lastCharityAmount);\\r\\n    }\\r\\n\\r\\n    function getWinnerNFTCID() external view returns (string memory) {\\r\\n        return currentLottery.winnerNFTCID;\\r\\n    }\\r\\n\\r\\n    function getParticipantNFTCID() external view returns (string memory) {\\r\\n        return currentLottery.participantNFTCID;\\r\\n    }\\r\\n\\r\\n    function isLotteryActive() external view returns (bool) {\\r\\n        return currentLottery.isActive;\\r\\n    }\\r\\n\\r\\n    function random() private view returns (uint256) {\\r\\n        bytes32 finalHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                blockhash(block.number - 1),\\r\\n                block.timestamp,\\r\\n                participants,\\r\\n                block.difficulty,\\r\\n                gasleft(),\\r\\n                msg.sender,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n        return uint256(finalHash);\\r\\n    }\\r\\n\\r\\n    function hasBadge(address user, string memory badge) external view returns (bool) {\\r\\n        return users[user].badges[badge];\\r\\n    }\\r\\n \\r\\n    function getUserLevel(address user) external view returns (uint256) {\\r\\n        return users[user].level;\\r\\n    }\\r\\n\\r\\n    function getUserBadges(address user) external view returns (string[] memory) {\\r\\n        return users[user].badgeList;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe36e1f53da32b38f2963b6ad3eae17de7805b0ed502dc1b56fd81e35850bd463\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002acb38038062002acb833981016040819052620000349162000187565b6200003f3362000056565b6200004a81620000a6565b506000600c55620001b9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000b062000129565b6001600160a01b0381166200011b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001268162000056565b50565b6000546001600160a01b03163314620001855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000112565b565b6000602082840312156200019a57600080fd5b81516001600160a01b0381168114620001b257600080fd5b9392505050565b61290280620001c96000396000f3fe6080604052600436106101e35760003560e01c80636be4097c116101025780639bac3b9f11610095578063c3b69ebb11610064578063c3b69ebb146105d2578063d6f5ef0e146105f1578063dd1445bb1461060f578063f2fde38b1461062f57600080fd5b80639bac3b9f146104f45780639dfea26014610509578063a87430ba1461052b578063abc845dc1461058d57600080fd5b8063884bf67c116100d1578063884bf67c1461048d5780638da5cb5b146104a25780638e7ea5b2146104c057806399ea5259146104de57600080fd5b80636be4097c146104385780636d8915861461044e578063715018a614610456578063758a2c381461046b57600080fd5b806337c245fe1161017a578063537a0c6211610149578063537a0c62146103be57806357de1f7d146103ee5780635aa68ac01461040357806367dd74ca1461042557600080fd5b806337c245fe1461034657806338d6904d146103735780634933da181461038957806351e730f0146103a957600080fd5b806321923bde116101b657806321923bde1461027657806325f8c8cb146102ba5780632bd56b06146102e257806335c1d3491461030e57600080fd5b8063107b70fa146101e85780631533794d1461021d5780631a0925411461023f5780631b11d14914610254575b600080fd5b3480156101f457600080fd5b5061020861020336600461206e565b61064f565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610232610697565b604051610214919061210c565b34801561024b57600080fd5b5061023261072c565b34801561026057600080fd5b5061027461026f366004612126565b61073e565b005b34801561028257600080fd5b506102ac610291366004612163565b6001600160a01b031660009081526012602052604090205490565b604051908152602001610214565b3480156102c657600080fd5b5060105460115460408051928352602083019190915201610214565b3480156102ee57600080fd5b506102f76107c3565b6040516102149b9a9998979695949392919061217e565b34801561031a57600080fd5b5061032e610329366004612223565b610ac4565b6040516001600160a01b039091168152602001610214565b34801561035257600080fd5b50610366610361366004612163565b610aee565b604051610214919061223c565b34801561037f57600080fd5b506102ac60115481565b34801561039557600080fd5b506102746103a436600461229e565b610be0565b3480156103b557600080fd5b50610232610f3c565b3480156103ca57600080fd5b506102086103d9366004612163565b60136020526000908152604090205460ff1681565b3480156103fa57600080fd5b50610232610f4e565b34801561040f57600080fd5b50610418610f60565b6040516102149190612394565b610274610433366004612223565b610fc1565b34801561044457600080fd5b506102ac600c5481565b610274611614565b34801561046257600080fd5b506102746116ad565b34801561047757600080fd5b506104806116c1565b60405161021491906123e1565b34801561049957600080fd5b506102ac611743565b3480156104ae57600080fd5b506000546001600160a01b031661032e565b3480156104cc57600080fd5b50600a546001600160a01b031661032e565b3480156104ea57600080fd5b506102ac60105481565b34801561050057600080fd5b50610274611761565b34801561051557600080fd5b5061051e611888565b6040516102149190612440565b34801561053757600080fd5b5061056d610546366004612163565b60126020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610214565b34801561059957600080fd5b506105ad6105a8366004612223565b611900565b604080516001600160a01b039094168452602084019290925290820152606001610214565b3480156105de57600080fd5b50600a54600160a01b900460ff16610208565b3480156105fd57600080fd5b506008546001600160a01b031661032e565b34801561061b57600080fd5b506105ad61062a366004612223565b61193d565b34801561063b57600080fd5b5061027461064a366004612163565b61194d565b6001600160a01b038216600090815260126020526040808220905160049091019061067b90849061249f565b9081526040519081900360200190205460ff1690505b92915050565b6060600160040180546106a9906124bb565b80601f01602080910402602001604051908101604052809291908181526020018280546106d5906124bb565b80156107225780601f106106f757610100808354040283529160200191610722565b820191906000526020600020905b81548152906001019060200180831161070557829003601f168201915b5050505050905090565b6060600160020180546106a9906124bb565b6107466119c3565b600a54600160a01b900460ff166107785760405162461bcd60e51b815260040161076f906124f5565b60405180910390fd5b6004610784828261256f565b506001546040517f7c71c7516f1f9c38abc68822ab033d7a5a104993c86a473974ef01674aef7280906107b890849061210c565b60405180910390a250565b60018054600280549192916107d7906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610803906124bb565b80156108505780601f1061082557610100808354040283529160200191610850565b820191906000526020600020905b81548152906001019060200180831161083357829003601f168201915b505050505090806002018054610865906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610891906124bb565b80156108de5780601f106108b3576101008083540402835291602001916108de565b820191906000526020600020905b8154815290600101906020018083116108c157829003601f168201915b5050505050908060030180546108f3906124bb565b80601f016020809104026020016040519081016040528092919081815260200182805461091f906124bb565b801561096c5780601f106109415761010080835404028352916020019161096c565b820191906000526020600020905b81548152906001019060200180831161094f57829003601f168201915b505050505090806004018054610981906124bb565b80601f01602080910402602001604051908101604052809291908181526020018280546109ad906124bb565b80156109fa5780601f106109cf576101008083540402835291602001916109fa565b820191906000526020600020905b8154815290600101906020018083116109dd57829003601f168201915b505050505090806005018054610a0f906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b906124bb565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b50505050600683015460078401546009850154600a90950154939491936001600160a01b03918216935090821691600160a01b900460ff16908b565b600d8181548110610ad457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152601260209081526040808320600501805482518185028101850190935280835260609492939192909184015b82821015610bd5578382906000526020600020018054610b48906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b74906124bb565b8015610bc15780601f10610b9657610100808354040283529160200191610bc1565b820191906000526020600020905b815481529060010190602001808311610ba457829003601f168201915b505050505081526020019060010190610b29565b505050509050919050565b610be86119c3565b600a54600160a01b900460ff1615610c425760405162461bcd60e51b815260206004820152601d60248201527f50726576696f7573206c6f7474657279207374696c6c20616374697665000000604482015260640161076f565b60008311610c9e5760405162461bcd60e51b815260206004820152602360248201527f5469636b6574207072696365206d75737420626520677265617465722074686160448201526206e20360ec1b606482015260840161076f565b6001600160a01b038216610d035760405162461bcd60e51b815260206004820152602660248201527f4368617269747920616464726573732063616e6e6f74206265207a65726f206160448201526564647265737360d01b606482015260840161076f565b600c8054906000610d1383612645565b9091555060009050610d25824261265e565b9050610d33600d6000611f17565b604051806101800160405280600c5481526020018a8152602001898152602001888152602001878152602001868152602001858152602001846001600160a01b03168152602001600d805480602002602001604051908101604052809291908181526020018280548015610dd057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db2575b50505091835250506000602080830191909152600160408301819052606090920184905282518255820151600290610e08908261256f565b5060408201516002820190610e1d908261256f565b5060608201516003820190610e32908261256f565b5060808201516004820190610e47908261256f565b5060a08201516005820190610e5c908261256f565b5060c0820151600682015560e08201516007820180546001600160a01b0319166001600160a01b039092169190911790556101008201518051610ea9916008840191602090910190611f35565b506101208201516009820180546101408501511515600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905561016090910151600a90910155600c546040517f55c7a95501adb871d32c986081b9b3cec1c7cc2fb1e2768ca42b5859b693d7a790610f29908c9087908690612671565b60405180910390a2505050505050505050565b6060600160030180546106a9906124bb565b6060600160050180546106a9906124bb565b6060600d80548060200260200160405190810160405280929190818152602001828054801561072257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f9a575050505050905090565b600a54600160a01b900460ff16610fea5760405162461bcd60e51b815260040161076f906124f5565b6000811161103a5760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e203000604482015260640161076f565b60075461104890829061269f565b34146110965760405162461bcd60e51b815260206004820152601c60248201527f496e636f727265637420746f74616c207469636b657420707269636500000000604482015260640161076f565b3360009081526013602052604090205460ff1661111657336000908152601360209081526040808320805460ff1916600190811790915560129092528220018054916110e183612645565b909155505033600090815260126020526040902060019081015461110591906126cc565b336000908152601260205260409020555b60005b8181101561117557600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b031916331790558061116d81612645565b915050611119565b50336000908152601260205260408120600301805434929061119890849061265e565b90915550506001546040518281523391907fdbaaf4c87ce30816c961a81d110622a3227ede77953d4383d514ff88ab2e0fd39060200160405180910390a3336000908152601260205260409020600190810154900361121b5761121b33604051806040016040528060088152602001672732bbb1b7b6b2b960c11b815250611a1d565b3360009081526012602052604090206001015460050361126a5761126a3360405180604001604052806013815260200172149959dd5b185c8814185c9d1a58da5c185b9d606a1b815250611a1d565b33600090815260126020526040902060010154600a036112b5576112b5336040518060400160405280600f81526020016e233932b8bab2b73a10283630bcb2b960891b815250611a1d565b3360009081526012602052604090206001015460140361130057611300336040518060400160405280600f81526020016e29b2b0b9b7b732b210283630bcb2b960891b815250611a1d565b3360009081526012602052604090206001015460320361134a5761134a336040518060400160405280600e81526020016d2b32ba32b930b710283630bcb2b960911b815250611a1d565b3360009081526012602052604090206001015460640361138f5761138f336040518060400160405280600981526020016821b2b73a3ab934b7b760b91b815250611a1d565b3360009081526012602052604090206001015460c8036113db576113db336040518060400160405280601081526020016f2237bab136329021b2b73a3ab934b7b760811b815250611a1d565b336000908152601260205260409020600101546101f40361142d5761142d33604051806040016040528060158152602001742430b6331026b4b63632b73734b09026b0b9ba32b960591b815250611a1d565b3360009081526012602052604090206003015467016345785d8a00001161147c5761147c336040518060400160405280600c81526020016b213937b73d32902237b737b960a11b815250611a1d565b336000908152601260205260409020600301546706f05b59d3b20000116114cb576114cb336040518060400160405280600c81526020016b29b4b63b32b9102237b737b960a11b815250611a1d565b33600090815260126020526040902060030154670de0b6b3a76400001161151857611518336040518060400160405280600a81526020016923b7b632102237b737b960b11b815250611a1d565b33600090815260126020526040902060030154671bc16d674ec800001161156957611569336040518060400160405280600e81526020016d283630ba34b73ab6902237b737b960911b815250611a1d565b33600090815260126020526040902060030154674563918244f40000116115b9576115b9336040518060400160405280600d81526020016c2234b0b6b7b732102237b737b960991b815250611a1d565b33600090815260126020526040902060030154678ac7230489e800001161161157611611336040518060400160405280601581526020017413585cdd195c88141a1a5b185b9d1a1c9bdc1a5cdd605a1b815250611a1d565b50565b61161c6119c3565b600034116116785760405162461bcd60e51b815260206004820152602360248201527f4d7573742073656e642045544820746f206465706f736974207072697a6520706044820152621bdbdb60ea1b606482015260840161076f565b6040513481527fd06425bd08236489ef547f062a818a18d708acb3c2b7696e56834dde9c310e4b9060200160405180910390a1565b6116b56119c3565b6116bf6000611b31565b565b6060600f805480602002602001604051908101604052809291908181526020016000905b8282101561173a576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016116e5565b50505050905090565b6000606461175247602861269f565b61175c91906126cc565b905090565b6117696119c3565b600a54600160a01b900460ff166117925760405162461bcd60e51b815260040161076f906124f5565b600d546117d35760405162461bcd60e51b815260206004820152600f60248201526e4e6f207061727469636970616e747360881b604482015260640161076f565b600a805460ff60a01b1916905560006117ea611b81565b90506117f581611bcb565b600154600754600854600a546040805143406020808301919091523360601b6bffffffffffffffffffffffff1916828401528251603481840301815260549092019283905281519101207f095e89e9fba9da30867b2da6229306e2b3387b4694a68dfdd5a635bd61754fb3946107b89460029460039492936001600160a01b0392831693600d939092169160049061275d565b6060600e805480602002602001604051908101604052809291908181526020016000908282101561173a576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016116e5565b600f818154811061191057600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925083565b600e818154811061191057600080fd5b6119556119c3565b6001600160a01b0381166119ba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161076f565b61161181611b31565b6000546001600160a01b031633146116bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076f565b60126000836001600160a01b03166001600160a01b0316815260200190815260200160002060040181604051611a53919061249f565b9081526040519081900360200190205460ff16611b2d576001600160a01b03821660009081526012602052604090819020905160019160040190611a9890849061249f565b9081526040805160209281900383019020805460ff1916931515939093179092556001600160a01b0384166000908152601282529182206005018054600181018255908352912001611aea828261256f565b50816001600160a01b03167f69c934c9cd93691b9435ed4d66ddb36755cce9ce6d0d34f7b5042287510c009682604051611b24919061210c565b60405180910390a25b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611b8f600143612813565b4042600d445a3330604051602001611bad9796959493929190612826565b60408051601f19818403018152919052805160209091012092915050565b600d805460009190611bdd90846128a2565b81548110611bed57611bed6128b6565b60009182526020822001546001600160a01b0316915047906064611c1283602861269f565b611c1c91906126cc565b905060006064611c2d84602861269f565b611c3791906126cc565b905060006064611c4885600a61269f565b611c5291906126cc565b905060006064611c6386600a61269f565b611c6d91906126cc565b6040519091506001600160a01b0387169085156108fc029086906000818181858888f19350505050158015611ca6573d6000803e3d6000fd5b506008546040516001600160a01b039091169084156108fc029085906000818181858888f19350505050158015611ce1573d6000803e3d6000fd5b50600080546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015611d1b573d6000803e3d6000fd5b50600a80546001600160a01b03199081166001600160a01b03898116918217909355604080516060808201835283825260208083018b815242848601818152600e805460018181018355600092835297517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd600392830290810180548e16928f169290921790915594517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe86015591517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff90940193909355865194850187526008548a1685528484018d8152858801838152600f8054808a018255955295517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802949092029384018054909a1691909a161790975596517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80388015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80490960195909555601089905560118890555490518881529293919290917ffee5b04775e1cd2311ed22cd00f5d2403aff38ff6f71d6d393f51854ed6bc986910160405180910390a3611f0d876040518060400160405280600b81526020016a263ab1b5bcabb4b73732b960a91b815250611a1d565b5050505050505050565b50805460008255906000526020600020908101906116119190611f9a565b828054828255906000526020600020908101928215611f8a579160200282015b82811115611f8a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611f55565b50611f96929150611f9a565b5090565b5b80821115611f965760008155600101611f9b565b80356001600160a01b0381168114611fc657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611ff257600080fd5b813567ffffffffffffffff8082111561200d5761200d611fcb565b604051601f8301601f19908116603f0116810190828211818310171561203557612035611fcb565b8160405283815286602085880101111561204e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561208157600080fd5b61208a83611faf565b9150602083013567ffffffffffffffff8111156120a657600080fd5b6120b285828601611fe1565b9150509250929050565b60005b838110156120d75781810151838201526020016120bf565b50506000910152565b600081518084526120f88160208601602086016120bc565b601f01601f19169290920160200192915050565b60208152600061211f60208301846120e0565b9392505050565b60006020828403121561213857600080fd5b813567ffffffffffffffff81111561214f57600080fd5b61215b84828501611fe1565b949350505050565b60006020828403121561217557600080fd5b61211f82611faf565b60006101608d83528060208401526121988184018e6120e0565b905082810360408401526121ac818d6120e0565b905082810360608401526121c0818c6120e0565b905082810360808401526121d4818b6120e0565b905082810360a08401526121e8818a6120e0565b60c084019890985250506001600160a01b0394851660e082015292909316610100830152151561012082015261014001529695505050505050565b60006020828403121561223557600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561229157603f1988860301845261227f8583516120e0565b94509285019290850190600101612263565b5092979650505050505050565b600080600080600080600080610100898b0312156122bb57600080fd5b883567ffffffffffffffff808211156122d357600080fd5b6122df8c838d01611fe1565b995060208b01359150808211156122f557600080fd5b6123018c838d01611fe1565b985060408b013591508082111561231757600080fd5b6123238c838d01611fe1565b975060608b013591508082111561233957600080fd5b6123458c838d01611fe1565b965060808b013591508082111561235b57600080fd5b506123688b828c01611fe1565b94505060a0890135925061237e60c08a01611faf565b915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b818110156123d55783516001600160a01b0316835292840192918401916001016123b0565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156123d55761242d83855180516001600160a01b0316825260208082015190830152604090810151910152565b92840192606092909201916001016123fd565b6020808252825182820181905260009190848201906040850190845b818110156123d55761248c83855180516001600160a01b0316825260208082015190830152604090810151910152565b928401926060929092019160010161245c565b600082516124b18184602087016120bc565b9190910192915050565b600181811c908216806124cf57607f821691505b6020821081036124ef57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601190820152704e6f20616374697665206c6f747465727960781b604082015260600190565b601f82111561256a57600081815260208120601f850160051c810160208610156125475750805b601f850160051c820191505b8181101561256657828155600101612553565b5050505b505050565b815167ffffffffffffffff81111561258957612589611fcb565b61259d8161259784546124bb565b84612520565b602080601f8311600181146125d257600084156125ba5750858301515b600019600386901b1c1916600185901b178555612566565b600085815260208120601f198616915b82811015612601578886015182559484019460019091019084016125e2565b508582101561261f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6000600182016126575761265761262f565b5060010190565b808201808211156106915761069161262f565b60608152600061268460608301866120e0565b6001600160a01b039490941660208301525060400152919050565b80820281158282048414176106915761069161262f565b634e487b7160e01b600052601260045260246000fd5b6000826126db576126db6126b6565b500490565b600081546126ed816124bb565b80855260206001838116801561270a576001811461272457612752565b60ff1985168884015283151560051b880183019550612752565b866000528260002060005b8581101561274a5781548a820186015290830190840161272f565b890184019650505b505050505092915050565b60006101008083526127718184018c6126e0565b9050602083820381850152612786828c6126e0565b604085018b90526001600160a01b038a811660608701528582036080870152895480835260008b8152848120955091928401915b818110156127d85785548416835260019586019592850192016127ba565b50506001600160a01b03891660a08701528760c087015285810360e087015261280181886126e0565b9e9d5050505050505050505050505050565b818103818111156106915761069161262f565b878152600060208881840152604083018854896000528260002060005b828110156128685781546001600160a01b031684529284019260019182019101612843565b505050968752860194909452506bffffffffffffffffffffffff19606092831b81166040860152911b166054830152506068019392505050565b6000826128b1576128b16126b6565b500690565b634e487b7160e01b600052603260045260246000fdfea26469706673582212208f28c77e226b92aa0f6400cf3128b21bdd1f6c34808bbbaae2c04648d4063a4864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c80636be4097c116101025780639bac3b9f11610095578063c3b69ebb11610064578063c3b69ebb146105d2578063d6f5ef0e146105f1578063dd1445bb1461060f578063f2fde38b1461062f57600080fd5b80639bac3b9f146104f45780639dfea26014610509578063a87430ba1461052b578063abc845dc1461058d57600080fd5b8063884bf67c116100d1578063884bf67c1461048d5780638da5cb5b146104a25780638e7ea5b2146104c057806399ea5259146104de57600080fd5b80636be4097c146104385780636d8915861461044e578063715018a614610456578063758a2c381461046b57600080fd5b806337c245fe1161017a578063537a0c6211610149578063537a0c62146103be57806357de1f7d146103ee5780635aa68ac01461040357806367dd74ca1461042557600080fd5b806337c245fe1461034657806338d6904d146103735780634933da181461038957806351e730f0146103a957600080fd5b806321923bde116101b657806321923bde1461027657806325f8c8cb146102ba5780632bd56b06146102e257806335c1d3491461030e57600080fd5b8063107b70fa146101e85780631533794d1461021d5780631a0925411461023f5780631b11d14914610254575b600080fd5b3480156101f457600080fd5b5061020861020336600461206e565b61064f565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610232610697565b604051610214919061210c565b34801561024b57600080fd5b5061023261072c565b34801561026057600080fd5b5061027461026f366004612126565b61073e565b005b34801561028257600080fd5b506102ac610291366004612163565b6001600160a01b031660009081526012602052604090205490565b604051908152602001610214565b3480156102c657600080fd5b5060105460115460408051928352602083019190915201610214565b3480156102ee57600080fd5b506102f76107c3565b6040516102149b9a9998979695949392919061217e565b34801561031a57600080fd5b5061032e610329366004612223565b610ac4565b6040516001600160a01b039091168152602001610214565b34801561035257600080fd5b50610366610361366004612163565b610aee565b604051610214919061223c565b34801561037f57600080fd5b506102ac60115481565b34801561039557600080fd5b506102746103a436600461229e565b610be0565b3480156103b557600080fd5b50610232610f3c565b3480156103ca57600080fd5b506102086103d9366004612163565b60136020526000908152604090205460ff1681565b3480156103fa57600080fd5b50610232610f4e565b34801561040f57600080fd5b50610418610f60565b6040516102149190612394565b610274610433366004612223565b610fc1565b34801561044457600080fd5b506102ac600c5481565b610274611614565b34801561046257600080fd5b506102746116ad565b34801561047757600080fd5b506104806116c1565b60405161021491906123e1565b34801561049957600080fd5b506102ac611743565b3480156104ae57600080fd5b506000546001600160a01b031661032e565b3480156104cc57600080fd5b50600a546001600160a01b031661032e565b3480156104ea57600080fd5b506102ac60105481565b34801561050057600080fd5b50610274611761565b34801561051557600080fd5b5061051e611888565b6040516102149190612440565b34801561053757600080fd5b5061056d610546366004612163565b60126020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610214565b34801561059957600080fd5b506105ad6105a8366004612223565b611900565b604080516001600160a01b039094168452602084019290925290820152606001610214565b3480156105de57600080fd5b50600a54600160a01b900460ff16610208565b3480156105fd57600080fd5b506008546001600160a01b031661032e565b34801561061b57600080fd5b506105ad61062a366004612223565b61193d565b34801561063b57600080fd5b5061027461064a366004612163565b61194d565b6001600160a01b038216600090815260126020526040808220905160049091019061067b90849061249f565b9081526040519081900360200190205460ff1690505b92915050565b6060600160040180546106a9906124bb565b80601f01602080910402602001604051908101604052809291908181526020018280546106d5906124bb565b80156107225780601f106106f757610100808354040283529160200191610722565b820191906000526020600020905b81548152906001019060200180831161070557829003601f168201915b5050505050905090565b6060600160020180546106a9906124bb565b6107466119c3565b600a54600160a01b900460ff166107785760405162461bcd60e51b815260040161076f906124f5565b60405180910390fd5b6004610784828261256f565b506001546040517f7c71c7516f1f9c38abc68822ab033d7a5a104993c86a473974ef01674aef7280906107b890849061210c565b60405180910390a250565b60018054600280549192916107d7906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610803906124bb565b80156108505780601f1061082557610100808354040283529160200191610850565b820191906000526020600020905b81548152906001019060200180831161083357829003601f168201915b505050505090806002018054610865906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610891906124bb565b80156108de5780601f106108b3576101008083540402835291602001916108de565b820191906000526020600020905b8154815290600101906020018083116108c157829003601f168201915b5050505050908060030180546108f3906124bb565b80601f016020809104026020016040519081016040528092919081815260200182805461091f906124bb565b801561096c5780601f106109415761010080835404028352916020019161096c565b820191906000526020600020905b81548152906001019060200180831161094f57829003601f168201915b505050505090806004018054610981906124bb565b80601f01602080910402602001604051908101604052809291908181526020018280546109ad906124bb565b80156109fa5780601f106109cf576101008083540402835291602001916109fa565b820191906000526020600020905b8154815290600101906020018083116109dd57829003601f168201915b505050505090806005018054610a0f906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b906124bb565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b50505050600683015460078401546009850154600a90950154939491936001600160a01b03918216935090821691600160a01b900460ff16908b565b600d8181548110610ad457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152601260209081526040808320600501805482518185028101850190935280835260609492939192909184015b82821015610bd5578382906000526020600020018054610b48906124bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b74906124bb565b8015610bc15780601f10610b9657610100808354040283529160200191610bc1565b820191906000526020600020905b815481529060010190602001808311610ba457829003601f168201915b505050505081526020019060010190610b29565b505050509050919050565b610be86119c3565b600a54600160a01b900460ff1615610c425760405162461bcd60e51b815260206004820152601d60248201527f50726576696f7573206c6f7474657279207374696c6c20616374697665000000604482015260640161076f565b60008311610c9e5760405162461bcd60e51b815260206004820152602360248201527f5469636b6574207072696365206d75737420626520677265617465722074686160448201526206e20360ec1b606482015260840161076f565b6001600160a01b038216610d035760405162461bcd60e51b815260206004820152602660248201527f4368617269747920616464726573732063616e6e6f74206265207a65726f206160448201526564647265737360d01b606482015260840161076f565b600c8054906000610d1383612645565b9091555060009050610d25824261265e565b9050610d33600d6000611f17565b604051806101800160405280600c5481526020018a8152602001898152602001888152602001878152602001868152602001858152602001846001600160a01b03168152602001600d805480602002602001604051908101604052809291908181526020018280548015610dd057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db2575b50505091835250506000602080830191909152600160408301819052606090920184905282518255820151600290610e08908261256f565b5060408201516002820190610e1d908261256f565b5060608201516003820190610e32908261256f565b5060808201516004820190610e47908261256f565b5060a08201516005820190610e5c908261256f565b5060c0820151600682015560e08201516007820180546001600160a01b0319166001600160a01b039092169190911790556101008201518051610ea9916008840191602090910190611f35565b506101208201516009820180546101408501511515600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905561016090910151600a90910155600c546040517f55c7a95501adb871d32c986081b9b3cec1c7cc2fb1e2768ca42b5859b693d7a790610f29908c9087908690612671565b60405180910390a2505050505050505050565b6060600160030180546106a9906124bb565b6060600160050180546106a9906124bb565b6060600d80548060200260200160405190810160405280929190818152602001828054801561072257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f9a575050505050905090565b600a54600160a01b900460ff16610fea5760405162461bcd60e51b815260040161076f906124f5565b6000811161103a5760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e203000604482015260640161076f565b60075461104890829061269f565b34146110965760405162461bcd60e51b815260206004820152601c60248201527f496e636f727265637420746f74616c207469636b657420707269636500000000604482015260640161076f565b3360009081526013602052604090205460ff1661111657336000908152601360209081526040808320805460ff1916600190811790915560129092528220018054916110e183612645565b909155505033600090815260126020526040902060019081015461110591906126cc565b336000908152601260205260409020555b60005b8181101561117557600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b031916331790558061116d81612645565b915050611119565b50336000908152601260205260408120600301805434929061119890849061265e565b90915550506001546040518281523391907fdbaaf4c87ce30816c961a81d110622a3227ede77953d4383d514ff88ab2e0fd39060200160405180910390a3336000908152601260205260409020600190810154900361121b5761121b33604051806040016040528060088152602001672732bbb1b7b6b2b960c11b815250611a1d565b3360009081526012602052604090206001015460050361126a5761126a3360405180604001604052806013815260200172149959dd5b185c8814185c9d1a58da5c185b9d606a1b815250611a1d565b33600090815260126020526040902060010154600a036112b5576112b5336040518060400160405280600f81526020016e233932b8bab2b73a10283630bcb2b960891b815250611a1d565b3360009081526012602052604090206001015460140361130057611300336040518060400160405280600f81526020016e29b2b0b9b7b732b210283630bcb2b960891b815250611a1d565b3360009081526012602052604090206001015460320361134a5761134a336040518060400160405280600e81526020016d2b32ba32b930b710283630bcb2b960911b815250611a1d565b3360009081526012602052604090206001015460640361138f5761138f336040518060400160405280600981526020016821b2b73a3ab934b7b760b91b815250611a1d565b3360009081526012602052604090206001015460c8036113db576113db336040518060400160405280601081526020016f2237bab136329021b2b73a3ab934b7b760811b815250611a1d565b336000908152601260205260409020600101546101f40361142d5761142d33604051806040016040528060158152602001742430b6331026b4b63632b73734b09026b0b9ba32b960591b815250611a1d565b3360009081526012602052604090206003015467016345785d8a00001161147c5761147c336040518060400160405280600c81526020016b213937b73d32902237b737b960a11b815250611a1d565b336000908152601260205260409020600301546706f05b59d3b20000116114cb576114cb336040518060400160405280600c81526020016b29b4b63b32b9102237b737b960a11b815250611a1d565b33600090815260126020526040902060030154670de0b6b3a76400001161151857611518336040518060400160405280600a81526020016923b7b632102237b737b960b11b815250611a1d565b33600090815260126020526040902060030154671bc16d674ec800001161156957611569336040518060400160405280600e81526020016d283630ba34b73ab6902237b737b960911b815250611a1d565b33600090815260126020526040902060030154674563918244f40000116115b9576115b9336040518060400160405280600d81526020016c2234b0b6b7b732102237b737b960991b815250611a1d565b33600090815260126020526040902060030154678ac7230489e800001161161157611611336040518060400160405280601581526020017413585cdd195c88141a1a5b185b9d1a1c9bdc1a5cdd605a1b815250611a1d565b50565b61161c6119c3565b600034116116785760405162461bcd60e51b815260206004820152602360248201527f4d7573742073656e642045544820746f206465706f736974207072697a6520706044820152621bdbdb60ea1b606482015260840161076f565b6040513481527fd06425bd08236489ef547f062a818a18d708acb3c2b7696e56834dde9c310e4b9060200160405180910390a1565b6116b56119c3565b6116bf6000611b31565b565b6060600f805480602002602001604051908101604052809291908181526020016000905b8282101561173a576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016116e5565b50505050905090565b6000606461175247602861269f565b61175c91906126cc565b905090565b6117696119c3565b600a54600160a01b900460ff166117925760405162461bcd60e51b815260040161076f906124f5565b600d546117d35760405162461bcd60e51b815260206004820152600f60248201526e4e6f207061727469636970616e747360881b604482015260640161076f565b600a805460ff60a01b1916905560006117ea611b81565b90506117f581611bcb565b600154600754600854600a546040805143406020808301919091523360601b6bffffffffffffffffffffffff1916828401528251603481840301815260549092019283905281519101207f095e89e9fba9da30867b2da6229306e2b3387b4694a68dfdd5a635bd61754fb3946107b89460029460039492936001600160a01b0392831693600d939092169160049061275d565b6060600e805480602002602001604051908101604052809291908181526020016000908282101561173a576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016116e5565b600f818154811061191057600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925083565b600e818154811061191057600080fd5b6119556119c3565b6001600160a01b0381166119ba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161076f565b61161181611b31565b6000546001600160a01b031633146116bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076f565b60126000836001600160a01b03166001600160a01b0316815260200190815260200160002060040181604051611a53919061249f565b9081526040519081900360200190205460ff16611b2d576001600160a01b03821660009081526012602052604090819020905160019160040190611a9890849061249f565b9081526040805160209281900383019020805460ff1916931515939093179092556001600160a01b0384166000908152601282529182206005018054600181018255908352912001611aea828261256f565b50816001600160a01b03167f69c934c9cd93691b9435ed4d66ddb36755cce9ce6d0d34f7b5042287510c009682604051611b24919061210c565b60405180910390a25b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611b8f600143612813565b4042600d445a3330604051602001611bad9796959493929190612826565b60408051601f19818403018152919052805160209091012092915050565b600d805460009190611bdd90846128a2565b81548110611bed57611bed6128b6565b60009182526020822001546001600160a01b0316915047906064611c1283602861269f565b611c1c91906126cc565b905060006064611c2d84602861269f565b611c3791906126cc565b905060006064611c4885600a61269f565b611c5291906126cc565b905060006064611c6386600a61269f565b611c6d91906126cc565b6040519091506001600160a01b0387169085156108fc029086906000818181858888f19350505050158015611ca6573d6000803e3d6000fd5b506008546040516001600160a01b039091169084156108fc029085906000818181858888f19350505050158015611ce1573d6000803e3d6000fd5b50600080546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015611d1b573d6000803e3d6000fd5b50600a80546001600160a01b03199081166001600160a01b03898116918217909355604080516060808201835283825260208083018b815242848601818152600e805460018181018355600092835297517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd600392830290810180548e16928f169290921790915594517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe86015591517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff90940193909355865194850187526008548a1685528484018d8152858801838152600f8054808a018255955295517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802949092029384018054909a1691909a161790975596517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80388015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80490960195909555601089905560118890555490518881529293919290917ffee5b04775e1cd2311ed22cd00f5d2403aff38ff6f71d6d393f51854ed6bc986910160405180910390a3611f0d876040518060400160405280600b81526020016a263ab1b5bcabb4b73732b960a91b815250611a1d565b5050505050505050565b50805460008255906000526020600020908101906116119190611f9a565b828054828255906000526020600020908101928215611f8a579160200282015b82811115611f8a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611f55565b50611f96929150611f9a565b5090565b5b80821115611f965760008155600101611f9b565b80356001600160a01b0381168114611fc657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611ff257600080fd5b813567ffffffffffffffff8082111561200d5761200d611fcb565b604051601f8301601f19908116603f0116810190828211818310171561203557612035611fcb565b8160405283815286602085880101111561204e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561208157600080fd5b61208a83611faf565b9150602083013567ffffffffffffffff8111156120a657600080fd5b6120b285828601611fe1565b9150509250929050565b60005b838110156120d75781810151838201526020016120bf565b50506000910152565b600081518084526120f88160208601602086016120bc565b601f01601f19169290920160200192915050565b60208152600061211f60208301846120e0565b9392505050565b60006020828403121561213857600080fd5b813567ffffffffffffffff81111561214f57600080fd5b61215b84828501611fe1565b949350505050565b60006020828403121561217557600080fd5b61211f82611faf565b60006101608d83528060208401526121988184018e6120e0565b905082810360408401526121ac818d6120e0565b905082810360608401526121c0818c6120e0565b905082810360808401526121d4818b6120e0565b905082810360a08401526121e8818a6120e0565b60c084019890985250506001600160a01b0394851660e082015292909316610100830152151561012082015261014001529695505050505050565b60006020828403121561223557600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561229157603f1988860301845261227f8583516120e0565b94509285019290850190600101612263565b5092979650505050505050565b600080600080600080600080610100898b0312156122bb57600080fd5b883567ffffffffffffffff808211156122d357600080fd5b6122df8c838d01611fe1565b995060208b01359150808211156122f557600080fd5b6123018c838d01611fe1565b985060408b013591508082111561231757600080fd5b6123238c838d01611fe1565b975060608b013591508082111561233957600080fd5b6123458c838d01611fe1565b965060808b013591508082111561235b57600080fd5b506123688b828c01611fe1565b94505060a0890135925061237e60c08a01611faf565b915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b818110156123d55783516001600160a01b0316835292840192918401916001016123b0565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156123d55761242d83855180516001600160a01b0316825260208082015190830152604090810151910152565b92840192606092909201916001016123fd565b6020808252825182820181905260009190848201906040850190845b818110156123d55761248c83855180516001600160a01b0316825260208082015190830152604090810151910152565b928401926060929092019160010161245c565b600082516124b18184602087016120bc565b9190910192915050565b600181811c908216806124cf57607f821691505b6020821081036124ef57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601190820152704e6f20616374697665206c6f747465727960781b604082015260600190565b601f82111561256a57600081815260208120601f850160051c810160208610156125475750805b601f850160051c820191505b8181101561256657828155600101612553565b5050505b505050565b815167ffffffffffffffff81111561258957612589611fcb565b61259d8161259784546124bb565b84612520565b602080601f8311600181146125d257600084156125ba5750858301515b600019600386901b1c1916600185901b178555612566565b600085815260208120601f198616915b82811015612601578886015182559484019460019091019084016125e2565b508582101561261f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6000600182016126575761265761262f565b5060010190565b808201808211156106915761069161262f565b60608152600061268460608301866120e0565b6001600160a01b039490941660208301525060400152919050565b80820281158282048414176106915761069161262f565b634e487b7160e01b600052601260045260246000fd5b6000826126db576126db6126b6565b500490565b600081546126ed816124bb565b80855260206001838116801561270a576001811461272457612752565b60ff1985168884015283151560051b880183019550612752565b866000528260002060005b8581101561274a5781548a820186015290830190840161272f565b890184019650505b505050505092915050565b60006101008083526127718184018c6126e0565b9050602083820381850152612786828c6126e0565b604085018b90526001600160a01b038a811660608701528582036080870152895480835260008b8152848120955091928401915b818110156127d85785548416835260019586019592850192016127ba565b50506001600160a01b03891660a08701528760c087015285810360e087015261280181886126e0565b9e9d5050505050505050505050505050565b818103818111156106915761069161262f565b878152600060208881840152604083018854896000528260002060005b828110156128685781546001600160a01b031684529284019260019182019101612843565b505050968752860194909452506bffffffffffffffffffffffff19606092831b81166040860152911b166054830152506068019392505050565b6000826128b1576128b16126b6565b500690565b634e487b7160e01b600052603260045260246000fdfea26469706673582212208f28c77e226b92aa0f6400cf3128b21bdd1f6c34808bbbaae2c04648d4063a4864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3328,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "currentLottery",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Lottery)3295_storage"
      },
      {
        "astId": 3330,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "currentLotteryId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3333,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "participants",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3337,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "winnerRecords",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(WinnerRecord)3302_storage)dyn_storage"
      },
      {
        "astId": 3341,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "charityRecords",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(CharityRecord)3309_storage)dyn_storage"
      },
      {
        "astId": 3343,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "lastPrizeAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3345,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "lastCharityAmount",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3350,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "users",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(User)3325_storage)"
      },
      {
        "astId": 3354,
        "contract": "contracts/YourContract.sol:LottusLottery",
        "label": "participantsMap",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CharityRecord)3309_storage)dyn_storage": {
        "base": "t_struct(CharityRecord)3309_storage",
        "encoding": "dynamic_array",
        "label": "struct LottusLottery.CharityRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WinnerRecord)3302_storage)dyn_storage": {
        "base": "t_struct(WinnerRecord)3302_storage",
        "encoding": "dynamic_array",
        "label": "struct LottusLottery.WinnerRecord[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)3325_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LottusLottery.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)3325_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CharityRecord)3309_storage": {
        "encoding": "inplace",
        "label": "struct LottusLottery.CharityRecord",
        "members": [
          {
            "astId": 3304,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "charity",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3306,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3308,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Lottery)3295_storage": {
        "encoding": "inplace",
        "label": "struct LottusLottery.Lottery",
        "members": [
          {
            "astId": 3271,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3273,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3275,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3277,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "bannerCID",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3279,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "winnerNFTCID",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3281,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "participantNFTCID",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 3283,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3285,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "charity",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3288,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "participants",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3290,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "winner",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 3292,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "isActive",
            "offset": 20,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 3294,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "endTime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(User)3325_storage": {
        "encoding": "inplace",
        "label": "struct LottusLottery.User",
        "members": [
          {
            "astId": 3311,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3313,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "participationCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3315,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "totalDonations",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3317,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "totalSpent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3321,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "badges",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_string_memory_ptr,t_bool)"
          },
          {
            "astId": 3324,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "badgeList",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(WinnerRecord)3302_storage": {
        "encoding": "inplace",
        "label": "struct LottusLottery.WinnerRecord",
        "members": [
          {
            "astId": 3297,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "winner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3299,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3301,
            "contract": "contracts/YourContract.sol:LottusLottery",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}